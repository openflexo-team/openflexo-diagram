use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.foundation.fml.ta.FMLModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/fml-diagramming/FMLClassDiagram.fml")
public class FMLClassDiagram {

  public Diagram diagram;
  public VirtualModel virtualModel;

  @CreationScheme  
  FMLClassDiagram:init(VirtualModelResource aVirtualModelResource) {  
    diagram = CreateDiagram();    
    virtualModel = parameters.aVirtualModelResource.virtualModel;  
  }  


  @FlexoConcept  
  public class FlexoConceptGR {  
  
    public DiagramShape conceptShape;  
    public DiagramShape header;  
    public DiagramShape icon;  
    public DiagramShape title;  
    public DiagramShape propertiesContainer;  
    public DiagramShape behaviourContainer;  
    public FlexoConcept concept;  
  
    @DropScheme    
    FlexoConceptGR:dropFlexoConceptGRAtTopLevel() {    
      concept = virtualModel.CreateFlexoConcept();      
      conceptShape = diagram.AddShape();      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();      
      propertiesContainer = diagram.AddShape();      
      behaviourContainer = diagram.AddShape();    
    }    
  
    @DeletionScheme    
    Void delete() {    
      delete conceptShape;      
      delete header;      
      delete icon;      
      delete title;      
      delete propertiesContainer;      
      delete behaviourContainer;    
    }    
  
    @DropScheme    
    FlexoConceptGR:representFlexoConceptGRAtTopLevel(FlexoConcept aConcept) {    
      conceptShape = diagram.AddShape();      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();      
      propertiesContainer = diagram.AddShape();      
      behaviourContainer = diagram.AddShape();      
      concept = parameters.aConcept;      
      this.updateProperties()    
    }    
  
    @ActionScheme    
    public Void updateProperties() {    
      log "updateProperties()"      
      for (property : concept.declaredProperties) {      
        log ("Pour la property " + property)        
        FlexoPropertyGR.create(property)      
      }    
    }    
  
  
    @FlexoConcept    
    public class FlexoPropertyGR {    
      
      public DiagramShape propertyShape;    
      public FlexoProperty property;    
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
      @DropScheme      
      FlexoPropertyGR:dropProperty() {      
          
      }      
      
      @CreationScheme      
      FlexoPropertyGR:create(FlexoProperty<Object> aProperty) {      
        property = parameters.aProperty;        
        log ("Coucou je cree la property " + parameters.aProperty)        
        propertyShape = diagram.AddShape();      
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class FlexoPropertyGR {  
  
    public DiagramShape propertyShape;  
    public FlexoProperty property;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @DropScheme    
    FlexoPropertyGR:dropProperty() {    
      
    }    
  
    @CreationScheme    
    FlexoPropertyGR:create(FlexoProperty<Object> aProperty) {    
      property = parameters.aProperty;      
      log ("Coucou je cree la property " + parameters.aProperty)      
      propertyShape = diagram.AddShape();    
    }    
  
  }  

}
