use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.foundation.fml.ta.FMLModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/fml-diagramming/FMLClassDiagram.fml")
public class FMLClassDiagram {

  public Diagram diagram;
  public VirtualModel virtualModel;

  @CreationScheme  
  FMLClassDiagram:init(VirtualModelResource aVirtualModelResource) {  
    diagram = CreateDiagram();    
    virtualModel = parameters.aVirtualModelResource.virtualModel;  
  }  


  @FlexoConcept  
  public class FlexoConceptGR extends ContainerGR  {  
  
    public DiagramShape header;  
    public DiagramShape icon;  
    public DiagramShape title;  
  
    @DropScheme    
    FlexoConceptGR:dropFlexoConceptGRAtTopLevel() {    
      concept = virtualModel.CreateFlexoConcept();      
      this.initContainerGR(true,true,false)      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();      
      topLevelShape.firePropertyChange invalidate    
    }    
  
    @DeletionScheme    
    Void delete() {    
      delete header;      
      delete icon;      
      delete title;    
    }    
  
    @DropScheme    
    FlexoConceptGR:representFlexoConceptGRAtTopLevel(FlexoConcept aConcept) {    
      this.initContainerGR(true,true,false)      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();      
      concept = parameters.aConcept;      
      this.updateProperties()    
    }    
  
    @ActionScheme    
    public Void updateProperties() {    
      log "updateProperties()"      
      MatchingSet matchingSet = this.initiateMatching(FlexoPropertyGR);      
      for (property : concept.declaredProperties) {      
        log ("Pour la property " + property)        
        FML@RT::MatchFlexoConceptInstance as FlexoPropertyGR match=(property=property) using FlexoPropertyGR:create(property)      
      }      
      matchingSet.finalizeMatching()      
      conceptShape.firePropertyChange invalidate    
    }    
  
  }  

  @FlexoConcept  
  public class FlexoPropertyGR {  
  
    public DiagramShape propertyShape;  
    public FlexoProperty property;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @DropScheme    
    FlexoPropertyGR:dropProperty() {    
      
    }    
  
    @CreationScheme    
    FlexoPropertyGR:create(FlexoProperty<Object> aProperty) {    
      property = parameters.aProperty;      
      log ("Coucou je cree la property " + parameters.aProperty)      
      propertyShape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class ContainerGR {  
  
    public PropertiesCompartmentGR propertyCompartment;  
    public PropertiesCompartmentGR behaviourCompartment;  
    public PropertiesCompartmentGR containmentCompartment;  
    public boolean displayProperties;  
    public boolean displayBehaviours;  
    public boolean displayContainment;  
    public DiagramShape topLevelShape;  
    public FlexoConcept concept;  
    @GetSetProperty(value="totalRequiredHeight", access=get)    
    public Double getTotalRequiredHeight {    
      log "Compute required height"      
      Double returned = 20.0;      
      if displayProperties {      
        returned = (returned + propertyCompartment.requiredHeight);      
      }      
      if displayBehaviours {      
        returned = (returned + behaviourCompartment.requiredHeight);      
      }      
      if displayContainment {      
        returned = (returned + containmentCompartment.requiredHeight);      
      }      
      return returned;    
    }  
    @GetSetProperty(value="totalHeightSpan", access=get)    
    public Double getTotalHeightSpan {    
      log "Compute height span"      
      Double returned = 0.0;      
      if displayProperties {      
        returned = (returned + propertyCompartment.heightSpan);      
      }      
      if displayBehaviours {      
        returned = (returned + behaviourCompartment.heightSpan);      
      }      
      if displayContainment {      
        returned = (returned + containmentCompartment.heightSpan);      
      }      
      return returned;    
    }  
    public double containerHeight;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void initContainerGR(Boolean displayProperties, Boolean displayBehaviours, Boolean displayContainment) {    
      containerHeight = 50.0;      
      topLevelShape = diagram.AddShape();      
      displayProperties = parameters.displayProperties;      
      displayBehaviours = parameters.displayBehaviours;      
      displayContainment = parameters.displayContainment;      
      if displayProperties {      
        log "Je cree le compartiment properties"        
        propertyCompartment = PropertiesCompartmentGR.create(topLevelShape);      
      }    
    }    
  
  
    @FlexoConcept    
    public class CompartmentGR {    
      
          
      abstract Double requiredHeight;    
          
      abstract Double heightSpan;    
      public DiagramShape compartmentShape;    
      
      @ActionScheme      
      Double getY(Double availableHeight) {      
        Double returned = 20.0;        
        if (concept = null) {        
          return returned;        
        }        
        if (this = propertyCompartment) {        
          return returned;        
        }        
        if (displayProperties & (propertyCompartment != null)) {        
          returned = (returned + propertyCompartment.getHeight(parameters.availableHeight));        
        }        
        if (this = behaviourCompartment) {        
          return returned;        
        }        
        if (displayBehaviours & (behaviourCompartment != null)) {        
          returned = (returned + behaviourCompartment.getHeight(parameters.availableHeight));        
        }        
        if (this = containmentCompartment) {        
          return returned;        
        }        
        if (displayContainment & (displayContainment != null)) {        
          returned = (returned + containmentCompartment.getHeight(parameters.availableHeight));        
        }        
        return returned;      
      }      
      
      @ActionScheme      
      Double getHeight(Double availableHeight) {      
        if (concept = null) {        
          return parameters.availableHeight;        
        }        
        Double extraSpace = (parameters.availableHeight - totalRequiredHeight);        
        return (requiredHeight + ((extraSpace * heightSpan) / totalHeightSpan));      
      }      
      
      @ActionScheme      
      Void init(DiagramShape topLevelShape) {      
        log "Jusque ici ca va"        
        log ("y=" + this.getY(100))        
        log ("height=" + this.getHeight(100))        
        compartmentShape = diagram.AddShape();      
      }      
      
    }    
  
    @FlexoConcept    
    public class PropertiesCompartmentGR extends CompartmentGR  {    
      
          
      public Double requiredHeight = ((concept != null) ? ((concept.declaredProperties.size * 16) + 10.0) : 10.0);    
          
      public Double heightSpan = 10.0;    
      
      @CreationScheme      
      PropertiesCompartmentGR:create(DiagramShape topLevelShape) {      
        this.init(parameters.topLevelShape)      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class BehaviourCompartmentGR extends CompartmentGR  {    
      
          
      public Double requiredHeight = ((concept != null) ? ((concept.declaredFlexoBehaviours.size * 16) + 10.0) : 10.0);    
          
      public Double heightSpan = 10.0;    
      
      @CreationScheme      
      BehaviourCompartmentGR:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class ContainmentCompartmentGR extends CompartmentGR  {    
      
          
      public Double requiredHeight = 10.0;    
          
      public Double heightSpan = 80.0;    
      
      @CreationScheme      
      ContainmentCompartmentGR:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class CompartmentGR {  
  
      
    abstract Double requiredHeight;  
      
    abstract Double heightSpan;  
    public DiagramShape compartmentShape;  
  
    @ActionScheme    
    Double getY(Double availableHeight) {    
      Double returned = 20.0;      
      if (concept = null) {      
        return returned;      
      }      
      if (this = propertyCompartment) {      
        return returned;      
      }      
      if (displayProperties & (propertyCompartment != null)) {      
        returned = (returned + propertyCompartment.getHeight(parameters.availableHeight));      
      }      
      if (this = behaviourCompartment) {      
        return returned;      
      }      
      if (displayBehaviours & (behaviourCompartment != null)) {      
        returned = (returned + behaviourCompartment.getHeight(parameters.availableHeight));      
      }      
      if (this = containmentCompartment) {      
        return returned;      
      }      
      if (displayContainment & (displayContainment != null)) {      
        returned = (returned + containmentCompartment.getHeight(parameters.availableHeight));      
      }      
      return returned;    
    }    
  
    @ActionScheme    
    Double getHeight(Double availableHeight) {    
      if (concept = null) {      
        return parameters.availableHeight;      
      }      
      Double extraSpace = (parameters.availableHeight - totalRequiredHeight);      
      return (requiredHeight + ((extraSpace * heightSpan) / totalHeightSpan));    
    }    
  
    @ActionScheme    
    Void init(DiagramShape topLevelShape) {    
      log "Jusque ici ca va"      
      log ("y=" + this.getY(100))      
      log ("height=" + this.getHeight(100))      
      compartmentShape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class PropertiesCompartmentGR extends CompartmentGR  {  
  
      
    public Double requiredHeight = ((concept != null) ? ((concept.declaredProperties.size * 16) + 10.0) : 10.0);  
      
    public Double heightSpan = 10.0;  
  
    @CreationScheme    
    PropertiesCompartmentGR:create(DiagramShape topLevelShape) {    
      this.init(parameters.topLevelShape)    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BehaviourCompartmentGR extends CompartmentGR  {  
  
      
    public Double requiredHeight = ((concept != null) ? ((concept.declaredFlexoBehaviours.size * 16) + 10.0) : 10.0);  
      
    public Double heightSpan = 10.0;  
  
    @CreationScheme    
    BehaviourCompartmentGR:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ContainmentCompartmentGR extends CompartmentGR  {  
  
      
    public Double requiredHeight = 10.0;  
      
    public Double heightSpan = 80.0;  
  
    @CreationScheme    
    ContainmentCompartmentGR:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
