use org.openflexo.technologyadapter.diagram.TypedDiagramModelSlot;
use org.openflexo.foundation.fml.ta.FMLModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/fml-diagramming/FMLClassDiagram.fml")
public class FMLClassDiagram {

  public Diagram diagram;
  public VirtualModel virtualModel;

  @CreationScheme  
  FMLClassDiagram:init(VirtualModelResource aVirtualModelResource) {  
    diagram = CreateDiagram();    
    virtualModel = parameters.aVirtualModelResource.virtualModel;  
  }  


  @FlexoConcept  
  public class FlexoConceptGR extends ContainerGR  {  
  
    public DiagramShape header;  
    public DiagramShape icon;  
    public DiagramShape title;  
  
    @DropScheme    
    FlexoConceptGR:dropFlexoConceptGRAtTopLevel() {    
      concept = virtualModel.CreateFlexoConcept();      
      this.initContainerGR(true,true,false)      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();    
    }    
  
    @DeletionScheme    
    Void delete() {    
      delete header;      
      delete icon;      
      delete title;    
    }    
  
    @DropScheme    
    FlexoConceptGR:representFlexoConceptGRAtTopLevel(FlexoConcept aConcept) {    
      this.initContainerGR(true,true,false)      
      header = diagram.AddShape();      
      icon = diagram.AddShape();      
      title = diagram.AddShape();      
      concept = parameters.aConcept;      
      this.updateProperties()    
    }    
  
    @ActionScheme    
    public Void updateProperties() {    
      log "updateProperties()"      
      MatchingSet matchingSet = this.initiateMatching(FlexoPropertyGR);      
      for (property : concept.declaredProperties) {      
        log ("Pour la property " + property)        
        FML@RT::MatchFlexoConceptInstance as FlexoPropertyGR match=(property=property) using FlexoPropertyGR:create(property)      
      }      
      matchingSet.finalizeMatching()      
      conceptShape.firePropertyChange invalidate    
    }    
  
  }  

  @FlexoConcept  
  public class FlexoPropertyGR {  
  
    public DiagramShape propertyShape;  
    public FlexoProperty property;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @DropScheme    
    FlexoPropertyGR:dropProperty() {    
      
    }    
  
    @CreationScheme    
    FlexoPropertyGR:create(FlexoProperty<Object> aProperty) {    
      property = parameters.aProperty;      
      log ("Coucou je cree la property " + parameters.aProperty)      
      propertyShape = diagram.AddShape();    
    }    
  
  }  

  @FlexoConcept  
  public class ContainerGR {  
  
    public PropertiesCompartmentGR propertyCompartment;  
    public PropertiesCompartmentGR behaviourCompartment;  
    public PropertiesCompartmentGR containmentCompartment;  
    public boolean displayProperties;  
    public boolean displayBehaviours;  
    public String displayContainment;  
    public DiagramShape topLevelShape;  
    public FlexoConcept concept;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void initContainerGR(Boolean displayProperties, Boolean displayBehaviours, Boolean displayContainment) {    
      topLevelShape = diagram.AddShape();      
      if displayProperties {      
          
      }    
    }    
  
  
    @FlexoConcept    
    public class CompartmentGR {    
      
          
      abstract Integer requiredHeight;    
      
      @ActionScheme      
      Void getY(Integer availableHeight) {      
          
      }      
      
      @ActionScheme      
      Void getHeight(Integer availableHeight) {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class PropertiesCompartmentGR {    
      
      @CreationScheme      
      PropertiesCompartmentGR:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class BehaviourCompartmentGR {    
      
      @CreationScheme      
      BehaviourCompartmentGR:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
    @FlexoConcept    
    public class ContainmentCompartmentGR {    
      
      @CreationScheme      
      ContainmentCompartmentGR:create() {      
          
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class CompartmentGR {  
  
      
    abstract Integer requiredHeight;  
  
    @ActionScheme    
    Void getY(Integer availableHeight) {    
      
    }    
  
    @ActionScheme    
    Void getHeight(Integer availableHeight) {    
      
    }    
  
  }  

  @FlexoConcept  
  public class PropertiesCompartmentGR {  
  
    @CreationScheme    
    PropertiesCompartmentGR:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class BehaviourCompartmentGR {  
  
    @CreationScheme    
    BehaviourCompartmentGR:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ContainmentCompartmentGR {  
  
    @CreationScheme    
    ContainmentCompartmentGR:create() {    
      
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
